// Mocks generated by Mockito 5.4.2 from annotations
// in session_mate/test/helpers/test_helpers.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
<<<<<<< HEAD
import 'dart:async' as _i7;
import 'dart:io' as _i8;
import 'dart:ui' as _i12;

import 'package:flutter/material.dart' as _i11;
=======
import 'dart:async' as _i9;
import 'dart:ui' as _i13;

import 'package:device_info_plus/device_info_plus.dart' as _i5;
import 'package:flutter/material.dart' as _i12;
>>>>>>> ffe6cdf (Completes the basic http service with the integration setup)
import 'package:logger/src/logger.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:package_info_plus/package_info_plus.dart' as _i4;
import 'package:session_mate/src/services/configuration_service.dart' as _i6;
import 'package:session_mate/src/services/http_service.dart' as _i15;
import 'package:session_mate/src/services/native_inforamation_service.dart'
    as _i14;
import 'package:session_mate/src/services/session_recording_service.dart'
<<<<<<< HEAD
    as _i5;
import 'package:session_mate/src/services/session_replay_service.dart' as _i6;
import 'package:session_mate/src/services/session_service.dart' as _i9;
import 'package:session_mate/src/utils/widget_finder.dart' as _i10;
=======
    as _i7;
import 'package:session_mate/src/services/session_replay_service.dart' as _i8;
import 'package:session_mate/src/services/session_service.dart' as _i10;
import 'package:session_mate/src/utils/widget_finder.dart' as _i11;
>>>>>>> ffe6cdf (Completes the basic http service with the integration setup)
import 'package:session_mate_core/session_mate_core.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSession_0 extends _i1.SmartFake implements _i2.Session {
  _FakeSession_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLogger_1 extends _i1.SmartFake implements _i3.Logger {
  _FakeLogger_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePackageInfo_2 extends _i1.SmartFake implements _i4.PackageInfo {
  _FakePackageInfo_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDeviceInfoPlugin_3 extends _i1.SmartFake
    implements _i5.DeviceInfoPlugin {
  _FakeDeviceInfoPlugin_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAndroidDeviceInfo_4 extends _i1.SmartFake
    implements _i5.AndroidDeviceInfo {
  _FakeAndroidDeviceInfo_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIosDeviceInfo_5 extends _i1.SmartFake implements _i5.IosDeviceInfo {
  _FakeIosDeviceInfo_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ConfigurationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockConfigurationService extends _i1.Mock
    implements _i6.ConfigurationService {
  @override
  bool get dataMaskingEnabled => (super.noSuchMethod(
        Invocation.getter(#dataMaskingEnabled),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  List<String> get keysToExcludeOnDataMasking => (super.noSuchMethod(
        Invocation.getter(#keysToExcludeOnDataMasking),
        returnValue: <String>[],
        returnValueForMissingStub: <String>[],
      ) as List<String>);
  @override
  List<String> get allKeysToExclude => (super.noSuchMethod(
        Invocation.getter(#allKeysToExclude),
        returnValue: <String>[],
        returnValueForMissingStub: <String>[],
      ) as List<String>);
  @override
  int get minimumStartupTime => (super.noSuchMethod(
        Invocation.getter(#minimumStartupTime),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
<<<<<<< HEAD
  int get listeningPort => (super.noSuchMethod(
        Invocation.getter(#listeningPort),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
=======
  String get apiKey => (super.noSuchMethod(
        Invocation.getter(#apiKey),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  bool get hasApiKey => (super.noSuchMethod(
        Invocation.getter(#hasApiKey),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
>>>>>>> ffe6cdf (Completes the basic http service with the integration setup)
  @override
  void setValues({
    bool? dataMaskingEnabled,
    List<String>? keysToExcludeOnDataMasking,
    int? minimumStartupTime,
<<<<<<< HEAD
    int? listeningPort,
=======
    String? apiKey,
>>>>>>> ffe6cdf (Completes the basic http service with the integration setup)
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #setValues,
          [],
          {
            #dataMaskingEnabled: dataMaskingEnabled,
            #keysToExcludeOnDataMasking: keysToExcludeOnDataMasking,
            #minimumStartupTime: minimumStartupTime,
<<<<<<< HEAD
            #listeningPort: listeningPort,
=======
            #apiKey: apiKey,
>>>>>>> ffe6cdf (Completes the basic http service with the integration setup)
          },
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SessionRecordingService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSessionRecordingService extends _i1.Mock
    implements _i7.SessionRecordingService {
  @override
  void handleEvent(_i2.NetworkEvent? event) => super.noSuchMethod(
        Invocation.method(
          #handleEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SessionReplayService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSessionReplayService extends _i1.Mock
    implements _i8.SessionReplayService {
  @override
  void handleEvent(_i2.NetworkEvent? event) => super.noSuchMethod(
        Invocation.method(
          #handleEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void populateCache(List<_i2.NetworkEvent>? events) => super.noSuchMethod(
        Invocation.method(
          #populateCache,
          [events],
        ),
        returnValueForMissingStub: null,
      );
  @override
<<<<<<< HEAD
  _i7.Future<void> handleMockRequest(_i8.HttpRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleMockRequest,
          [request],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  _i7.Future<List<int>> getSanitizedData(
=======
  _i9.Future<List<int>> getSanitizedData(
>>>>>>> ffe6cdf (Completes the basic http service with the integration setup)
    List<int>? data, {
    String? uid,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSanitizedData,
          [data],
          {#uid: uid},
        ),
        returnValue: _i9.Future<List<int>>.value(<int>[]),
        returnValueForMissingStub: _i9.Future<List<int>>.value(<int>[]),
      ) as _i9.Future<List<int>>);
}

/// A class which mocks [SessionService].
///
/// See the documentation for Mockito's code generation for more information.
<<<<<<< HEAD
class MockSessionService extends _i1.Mock implements _i9.SessionService {
=======
class MockSessionService extends _i1.Mock implements _i10.SessionService {
>>>>>>> ffe6cdf (Completes the basic http service with the integration setup)
  @override
  List<_i2.NetworkEvent> get networkEvents => (super.noSuchMethod(
        Invocation.getter(#networkEvents),
        returnValue: <_i2.NetworkEvent>[],
        returnValueForMissingStub: <_i2.NetworkEvent>[],
      ) as List<_i2.NetworkEvent>);
  @override
  List<_i2.SessionEvent> get sessionEvents => (super.noSuchMethod(
        Invocation.getter(#sessionEvents),
        returnValue: <_i2.SessionEvent>[],
        returnValueForMissingStub: <_i2.SessionEvent>[],
      ) as List<_i2.SessionEvent>);
  @override
  List<_i2.UIEvent> get uiEvents => (super.noSuchMethod(
        Invocation.getter(#uiEvents),
        returnValue: <_i2.UIEvent>[],
        returnValueForMissingStub: <_i2.UIEvent>[],
      ) as List<_i2.UIEvent>);
  @override
  List<String> get views => (super.noSuchMethod(
        Invocation.getter(#views),
        returnValue: <String>[],
        returnValueForMissingStub: <String>[],
      ) as List<String>);
  @override
  void addEvent(_i2.SessionEvent? event) => super.noSuchMethod(
        Invocation.method(
          #addEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addAllEvents(List<_i2.SessionEvent>? events) => super.noSuchMethod(
        Invocation.method(
          #addAllEvents,
          [events],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addView(String? view) => super.noSuchMethod(
        Invocation.method(
          #addView,
          [view],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setActiveSession(_i2.Session? selectedSession) => super.noSuchMethod(
        Invocation.method(
          #setActiveSession,
          [selectedSession],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void clear() => super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.Session captureSession({
    _i2.SessionPriority? priority = _i2.SessionPriority.high,
    Object? exception,
    StackTrace? stackTrace,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #captureSession,
          [],
          {
            #priority: priority,
            #exception: exception,
            #stackTrace: stackTrace,
          },
        ),
        returnValue: _FakeSession_0(
          this,
          Invocation.method(
            #captureSession,
            [],
            {
              #priority: priority,
              #exception: exception,
              #stackTrace: stackTrace,
            },
          ),
        ),
        returnValueForMissingStub: _FakeSession_0(
          this,
          Invocation.method(
            #captureSession,
            [],
            {
              #priority: priority,
              #exception: exception,
              #stackTrace: stackTrace,
            },
          ),
        ),
      ) as _i2.Session);
}

/// A class which mocks [WidgetFinder].
///
/// See the documentation for Mockito's code generation for more information.
<<<<<<< HEAD
class MockWidgetFinder extends _i1.Mock implements _i10.WidgetFinder {
=======
class MockWidgetFinder extends _i1.Mock implements _i11.WidgetFinder {
>>>>>>> ffe6cdf (Completes the basic http service with the integration setup)
  @override
  _i3.Logger get log => (super.noSuchMethod(
        Invocation.getter(#log),
        returnValue: _FakeLogger_1(
          this,
          Invocation.getter(#log),
        ),
        returnValueForMissingStub: _FakeLogger_1(
          this,
          Invocation.getter(#log),
        ),
      ) as _i3.Logger);
  @override
<<<<<<< HEAD
  _i11.TextField? getTextFieldAtPosition({
    required _i12.Offset? position,
=======
  _i12.TextField? getTextFieldAtPosition({
    required _i13.Offset? position,
>>>>>>> ffe6cdf (Completes the basic http service with the integration setup)
    bool? verbose = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTextFieldAtPosition,
          [],
          {
            #position: position,
            #verbose: verbose,
          },
        ),
        returnValueForMissingStub: null,
<<<<<<< HEAD
      ) as _i11.TextField?);
=======
      ) as _i12.TextField?);
}

/// A class which mocks [NativeInformationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNativeInformationService extends _i1.Mock
    implements _i14.NativeInformationService {
  @override
  _i4.PackageInfo get packageInfo => (super.noSuchMethod(
        Invocation.getter(#packageInfo),
        returnValue: _FakePackageInfo_2(
          this,
          Invocation.getter(#packageInfo),
        ),
        returnValueForMissingStub: _FakePackageInfo_2(
          this,
          Invocation.getter(#packageInfo),
        ),
      ) as _i4.PackageInfo);
  @override
  set packageInfo(_i4.PackageInfo? _packageInfo) => super.noSuchMethod(
        Invocation.setter(
          #packageInfo,
          _packageInfo,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.DeviceInfoPlugin get deviceInfo => (super.noSuchMethod(
        Invocation.getter(#deviceInfo),
        returnValue: _FakeDeviceInfoPlugin_3(
          this,
          Invocation.getter(#deviceInfo),
        ),
        returnValueForMissingStub: _FakeDeviceInfoPlugin_3(
          this,
          Invocation.getter(#deviceInfo),
        ),
      ) as _i5.DeviceInfoPlugin);
  @override
  set deviceInfo(_i5.DeviceInfoPlugin? _deviceInfo) => super.noSuchMethod(
        Invocation.setter(
          #deviceInfo,
          _deviceInfo,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.AndroidDeviceInfo get androidDeviceInfo => (super.noSuchMethod(
        Invocation.getter(#androidDeviceInfo),
        returnValue: _FakeAndroidDeviceInfo_4(
          this,
          Invocation.getter(#androidDeviceInfo),
        ),
        returnValueForMissingStub: _FakeAndroidDeviceInfo_4(
          this,
          Invocation.getter(#androidDeviceInfo),
        ),
      ) as _i5.AndroidDeviceInfo);
  @override
  set androidDeviceInfo(_i5.AndroidDeviceInfo? _androidDeviceInfo) =>
      super.noSuchMethod(
        Invocation.setter(
          #androidDeviceInfo,
          _androidDeviceInfo,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.IosDeviceInfo get iosDeviceInfo => (super.noSuchMethod(
        Invocation.getter(#iosDeviceInfo),
        returnValue: _FakeIosDeviceInfo_5(
          this,
          Invocation.getter(#iosDeviceInfo),
        ),
        returnValueForMissingStub: _FakeIosDeviceInfo_5(
          this,
          Invocation.getter(#iosDeviceInfo),
        ),
      ) as _i5.IosDeviceInfo);
  @override
  set iosDeviceInfo(_i5.IosDeviceInfo? _iosDeviceInfo) => super.noSuchMethod(
        Invocation.setter(
          #iosDeviceInfo,
          _iosDeviceInfo,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get appVersion => (super.noSuchMethod(
        Invocation.getter(#appVersion),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  String get appId => (super.noSuchMethod(
        Invocation.getter(#appId),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  String get osVersion => (super.noSuchMethod(
        Invocation.getter(#osVersion),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  String get platform => (super.noSuchMethod(
        Invocation.getter(#platform),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  String get uniqueIdentifier => (super.noSuchMethod(
        Invocation.getter(#uniqueIdentifier),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  _i9.Future<void> intialise() => (super.noSuchMethod(
        Invocation.method(
          #intialise,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
}

/// A class which mocks [HttpService].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpService extends _i1.Mock implements _i15.HttpService {
  @override
  _i9.Future<bool> saveSession({required _i2.Session? session}) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveSession,
          [],
          {#session: session},
        ),
        returnValue: _i9.Future<bool>.value(false),
        returnValueForMissingStub: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);
>>>>>>> ffe6cdf (Completes the basic http service with the integration setup)
}
